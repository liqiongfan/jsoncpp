/* Generated by re2c 2.0.3 */
#include <cstdlib>
#include <iostream>
#include "json_language.hh"



#define YYCURSOR  l.start
#define YYLIMIT   l.limit
#define YYMARKER  l.marker
#define YYCTXMARKER l.ctxmarker
#define YYCTYPE unsigned char
#define YYGETCONDITION() l.state
#define YYSETCONDITION(cond) l.state=(yyc##cond)
#define GOTO(cond) goto yyc_##cond
#define SETANDJUMPTO(cond) YYSETCONDITION(cond); GOTO(cond)
#define FORWARD(lines, columns) l.line += (lines); l.column += (columns)
#define LOCATION yy::parser::location_type(nullptr, yy::location::counter_type(l.line), yy::location::counter_type(l.column))

yy::parser::symbol_type kk_lex(scanner &l) {

std:
    std::string data;
    char *begin = l.start;
skip:


	{
		YYCTYPE yych;
		unsigned int yyaccept = 0;
		if (YYGETCONDITION() < 2) {
			if (YYGETCONDITION() < 1) {
				goto yyc_JSON;
			} else {
				goto yyc_KEY;
			}
		} else {
			if (YYGETCONDITION() < 3) {
				goto yyc_KEY1;
			} else {
				goto yyc_COMMENTS;
			}
		}
/* *********************************** */
yyc_JSON:
		{
			static const unsigned char yybm[] = {
				  0,   0,   0,   0,   0,   0,   0,   0, 
				  0,  16,   0,   0,   0,  16,   0,   0, 
				  0,   0,   0,   0,   0,   0,   0,   0, 
				  0,   0,   0,   0,   0,   0,   0,   0, 
				 16,   0,   0,   0,   0,   0,   0,   0, 
				  0,   0,   0,   0,   0,   0,   0,   0, 
				 96,  96,  96,  96,  96,  96,  96,  96, 
				 96,  96,   0,   0,   0,   0,   0,   0, 
				  0, 192, 192, 192, 192, 192, 192,  64, 
				 64,  64,  64,  64,  64,  64,  64,  64, 
				 64,  64,  64,  64,  64,  64,  64,  64, 
				 64,  64,  64,   0,   0,   0,   0,  64, 
				  0, 192, 192, 192, 192, 192, 192,  64, 
				 64,  64,  64,  64,  64,  64,  64,  64, 
				 64,  64,  64,  64,  64,  64,  64,  64, 
				 64,  64,  64,   0,   0,   0,   0,   0, 
				 64,  64,  64,  64,  64,  64,  64,  64, 
				 64,  64,  64,  64,  64,  64,  64,  64, 
				 64,  64,  64,  64,  64,  64,  64,  64, 
				 64,  64,  64,  64,  64,  64,  64,  64, 
				 64,  64,  64,  64,  64,  64,  64,  64, 
				 64,  64,  64,  64,  64,  64,  64,  64, 
				 64,  64,  64,  64,  64,  64,  64,  64, 
				 64,  64,  64,  64,  64,  64,  64,  64, 
				 64,  64,  64,  64,  64,  64,  64,  64, 
				 64,  64,  64,  64,  64,  64,  64,  64, 
				 64,  64,  64,  64,  64,  64,  64,  64, 
				 64,  64,  64,  64,  64,  64,  64,  64, 
				 64,  64,  64,  64,  64,  64,  64,  64, 
				 64,  64,  64,  64,  64,  64,  64,  64, 
				 64,  64,  64,  64,  64,  64,  64,  64, 
				 64,  64,  64,  64,  64,  64,  64,  64, 
			};
			yych = *YYCURSOR;
			if (yych <= ':') {
				if (yych <= '#') {
					if (yych <= '\f') {
						if (yych <= 0x08) {
							if (yych <= 0x00) goto yy3;
						} else {
							if (yych <= '\t') goto yy5;
							if (yych <= '\n') goto yy8;
						}
					} else {
						if (yych <= ' ') {
							if (yych <= '\r') goto yy10;
							if (yych >= ' ') goto yy5;
						} else {
							if (yych <= '!') goto yy2;
							if (yych <= '"') goto yy11;
							goto yy13;
						}
					}
				} else {
					if (yych <= ',') {
						if (yych <= '\'') {
							if (yych >= '\'') goto yy15;
						} else {
							if (yych <= '*') goto yy2;
							if (yych <= '+') goto yy17;
							goto yy18;
						}
					} else {
						if (yych <= '/') {
							if (yych <= '-') goto yy20;
							if (yych <= '.') goto yy21;
							goto yy24;
						} else {
							if (yych <= '0') goto yy25;
							if (yych <= '9') goto yy27;
							goto yy29;
						}
					}
				}
			} else {
				if (yych <= 'h') {
					if (yych <= ']') {
						if (yych <= 'Z') {
							if (yych >= 'A') goto yy31;
						} else {
							if (yych <= '[') goto yy34;
							if (yych >= ']') goto yy36;
						}
					} else {
						if (yych <= '`') {
							if (yych == '_') goto yy31;
						} else {
							if (yych == 'f') goto yy38;
							goto yy31;
						}
					}
				} else {
					if (yych <= 't') {
						if (yych <= 'm') {
							if (yych <= 'i') goto yy39;
							goto yy31;
						} else {
							if (yych <= 'n') goto yy40;
							if (yych <= 's') goto yy31;
							goto yy41;
						}
					} else {
						if (yych <= '|') {
							if (yych <= 'z') goto yy31;
							if (yych <= '{') goto yy42;
						} else {
							if (yych <= '}') goto yy44;
							if (yych >= 0x80) goto yy31;
						}
					}
				}
			}
yy2:
			YYCURSOR = YYMARKER;
			if (yyaccept == 0) {
				goto yy23;
			} else {
				goto yy26;
			}
yy3:
			++YYCURSOR;
			{
    return yy::parser::make_YYEOF(LOCATION);
}
yy5:
			yych = *++YYCURSOR;
yy6:
			if (yybm[0+yych] & 16) {
				goto yy5;
			}
			{ 
    FORWARD(0, l.start - begin); 
    goto std; 
}
yy8:
			++YYCURSOR;
			{
    FORWARD(1, 0);
    l.column = 0; 
    goto std;
}
yy10:
			yych = *++YYCURSOR;
			if (yych == '\n') goto yy8;
			goto yy6;
yy11:
			++YYCURSOR;
			{
    begin = l.start;
    SETANDJUMPTO(KEY);
}
yy13:
			++YYCURSOR;
			{
    SETANDJUMPTO(COMMENTS);
}
yy15:
			++YYCURSOR;
			{
    begin = l.start;
    SETANDJUMPTO(KEY1);
}
yy17:
			yych = *++YYCURSOR;
			if (yych <= '9') {
				if (yych <= '/') goto yy2;
				if (yych <= '0') goto yy46;
				goto yy27;
			} else {
				if (yych == 'i') goto yy47;
				goto yy2;
			}
yy18:
			++YYCURSOR;
			{ FORWARD(0, l.start - begin); return yy::parser::symbol_type(',', LOCATION); }
yy20:
			yych = *++YYCURSOR;
			if (yych <= '9') {
				if (yych <= '/') goto yy2;
				if (yych <= '0') goto yy46;
				goto yy27;
			} else {
				if (yych == 'i') goto yy48;
				goto yy2;
			}
yy21:
			yyaccept = 0;
			yych = *(YYMARKER = ++YYCURSOR);
			if (yybm[0+yych] & 32) {
				goto yy21;
			}
			if (yych == 'E') goto yy49;
			if (yych == 'e') goto yy49;
yy23:
			{
    FORWARD(0, l.start - begin);
    std::string str(begin, l.start);
    double d = std::strtod(str.data(), nullptr);
    return yy::parser::make_DOUBLE(d, LOCATION);
}
yy24:
			yych = *++YYCURSOR;
			if (yych == '/') goto yy50;
			goto yy2;
yy25:
			yyaccept = 1;
			yych = *(YYMARKER = ++YYCURSOR);
			if (yych <= 'W') {
				if (yych <= '.') {
					if (yych >= '.') goto yy21;
				} else {
					if (yych == 'E') goto yy49;
				}
			} else {
				if (yych <= 'e') {
					if (yych <= 'X') goto yy52;
					if (yych >= 'e') goto yy49;
				} else {
					if (yych == 'x') goto yy52;
				}
			}
yy26:
			{
    FORWARD(0, l.start - begin);
    std::string str(begin, l.start);
    long ll = std::strtol(str.data(), nullptr, 10);
    return yy::parser::make_INT(ll, LOCATION);
}
yy27:
			yyaccept = 1;
			yych = *(YYMARKER = ++YYCURSOR);
			if (yych <= '9') {
				if (yych == '.') goto yy21;
				if (yych <= '/') goto yy26;
				goto yy27;
			} else {
				if (yych <= 'E') {
					if (yych <= 'D') goto yy26;
					goto yy49;
				} else {
					if (yych == 'e') goto yy49;
					goto yy26;
				}
			}
yy29:
			++YYCURSOR;
			{ FORWARD(0, l.start - begin); return yy::parser::symbol_type(':', LOCATION); }
yy31:
			yych = *++YYCURSOR;
yy32:
			if (yybm[0+yych] & 64) {
				goto yy31;
			}
			{
    FORWARD(0, l.start - begin);
    std::string v(begin, l.start);
    return yy::parser::make_LABEL(v, LOCATION);
}
yy34:
			++YYCURSOR;
			{ FORWARD(0, l.start - begin); return yy::parser::symbol_type('[', LOCATION); }
yy36:
			++YYCURSOR;
			{ FORWARD(0, l.start - begin); return yy::parser::symbol_type(']', LOCATION); }
yy38:
			yych = *++YYCURSOR;
			if (yych == 'a') goto yy53;
			goto yy32;
yy39:
			yych = *++YYCURSOR;
			if (yych == 'n') goto yy54;
			goto yy32;
yy40:
			yych = *++YYCURSOR;
			if (yych == 'u') goto yy55;
			goto yy32;
yy41:
			yych = *++YYCURSOR;
			if (yych == 'r') goto yy56;
			goto yy32;
yy42:
			++YYCURSOR;
			{ FORWARD(0, l.start - begin); return yy::parser::symbol_type('{', LOCATION); }
yy44:
			++YYCURSOR;
			{ FORWARD(0, l.start - begin); return yy::parser::symbol_type('}', LOCATION); }
yy46:
			yyaccept = 1;
			yych = *(YYMARKER = ++YYCURSOR);
			if (yych <= 'D') {
				if (yych == '.') goto yy21;
				goto yy26;
			} else {
				if (yych <= 'E') goto yy49;
				if (yych == 'e') goto yy49;
				goto yy26;
			}
yy47:
			yych = *++YYCURSOR;
			if (yych == 'n') goto yy57;
			goto yy2;
yy48:
			yych = *++YYCURSOR;
			if (yych == 'n') goto yy58;
			goto yy2;
yy49:
			yych = *++YYCURSOR;
			if (yych <= ',') {
				if (yych == '+') goto yy59;
				goto yy2;
			} else {
				if (yych <= '-') goto yy59;
				if (yych <= '/') goto yy2;
				if (yych <= '9') goto yy60;
				goto yy2;
			}
yy50:
			++YYCURSOR;
			{
    SETANDJUMPTO(COMMENTS);
}
yy52:
			yych = *++YYCURSOR;
			if (yybm[0+yych] & 128) {
				goto yy62;
			}
			goto yy2;
yy53:
			yych = *++YYCURSOR;
			if (yych == 'l') goto yy65;
			goto yy32;
yy54:
			yych = *++YYCURSOR;
			if (yych == 'f') goto yy66;
			goto yy32;
yy55:
			yych = *++YYCURSOR;
			if (yych == 'l') goto yy68;
			goto yy32;
yy56:
			yych = *++YYCURSOR;
			if (yych == 'u') goto yy69;
			goto yy32;
yy57:
			yych = *++YYCURSOR;
			if (yych == 'f') goto yy70;
			goto yy2;
yy58:
			yych = *++YYCURSOR;
			if (yych == 'f') goto yy71;
			goto yy2;
yy59:
			yych = *++YYCURSOR;
			if (yych <= '/') goto yy2;
			if (yych >= ':') goto yy2;
yy60:
			yych = *++YYCURSOR;
			if (yych <= '/') goto yy23;
			if (yych <= '9') goto yy60;
			goto yy23;
yy62:
			yych = *++YYCURSOR;
			if (yybm[0+yych] & 128) {
				goto yy62;
			}
			{
    FORWARD(0, l.start - begin);
    std::string str(begin, l.start);
    long ll = std::strtol(str.data(), nullptr, 16);
    return yy::parser::make_HEX(json::hex(ll, str), LOCATION);
}
yy65:
			yych = *++YYCURSOR;
			if (yych == 's') goto yy73;
			goto yy32;
yy66:
			yych = *++YYCURSOR;
			if (yybm[0+yych] & 64) {
				goto yy31;
			}
yy67:
			{ FORWARD(0, l.start - begin); return yy::parser::make_INF(json::infinity(false), LOCATION);    }
yy68:
			yych = *++YYCURSOR;
			if (yych == 'l') goto yy74;
			goto yy32;
yy69:
			yych = *++YYCURSOR;
			if (yych == 'e') goto yy76;
			goto yy32;
yy70:
			++YYCURSOR;
			goto yy67;
yy71:
			++YYCURSOR;
			{ FORWARD(0, l.start - begin); return yy::parser::make_INF(json::infinity(true), LOCATION);     }
yy73:
			yych = *++YYCURSOR;
			if (yych == 'e') goto yy78;
			goto yy32;
yy74:
			yych = *++YYCURSOR;
			if (yybm[0+yych] & 64) {
				goto yy31;
			}
			{ FORWARD(0, l.start - begin); return yy::parser::make_NUL(json::null(), LOCATION);             }
yy76:
			yych = *++YYCURSOR;
			if (yybm[0+yych] & 64) {
				goto yy31;
			}
			{ FORWARD(0, l.start - begin); return yy::parser::make_BOOLEAN(json::boolean(true), LOCATION);  }
yy78:
			yych = *++YYCURSOR;
			if (yybm[0+yych] & 64) {
				goto yy31;
			}
			{ FORWARD(0, l.start - begin); return yy::parser::make_BOOLEAN(json::boolean(false), LOCATION); }
		}
/* *********************************** */
yyc_KEY:
		yych = *YYCURSOR;
		if (yych <= '\f') {
			if (yych <= '\t') {
				if (yych >= '\t') goto yy84;
			} else {
				if (yych <= '\n') goto yy86;
				if (yych >= '\f') goto yy84;
			}
		} else {
			if (yych <= ' ') {
				if (yych >= ' ') goto yy84;
			} else {
				if (yych == '"') goto yy88;
			}
		}
		++YYCURSOR;
		{
    FORWARD(0, 1);
    SETANDJUMPTO(KEY);
}
yy84:
		++YYCURSOR;
		{
    FORWARD(0, 1);
    data = data.append(begin, l.start);
    begin=l.start;
    SETANDJUMPTO(KEY);
}
yy86:
		++YYCURSOR;
		{
    if (*(l.start-2) == '\r') {
        if (*(l.start-3) != '\\') {
            goto syntax_error;
        }
        data = data.append(begin, l.start-3);
    } else {
        if (*(l.start-2) != '\\') {
            goto syntax_error;
        }
        data = data.append(begin, l.start-2);
    }
    begin = l.start;
    FORWARD(1, 0);
    l.column = 0; 
    SETANDJUMPTO(KEY);
}
yy88:
		++YYCURSOR;
		{
    std::string v(begin, l.start-1);
    if (data.size() >= 1) {
        v = data + v;
    }
    data.clear();
    YYSETCONDITION(JSON);
    return yy::parser::make_STRING(v, LOCATION);
}
/* *********************************** */
yyc_KEY1:
		yych = *YYCURSOR;
		if (yych <= '\f') {
			if (yych <= '\t') {
				if (yych >= '\t') goto yy94;
			} else {
				if (yych <= '\n') goto yy96;
				if (yych >= '\f') goto yy94;
			}
		} else {
			if (yych <= ' ') {
				if (yych >= ' ') goto yy94;
			} else {
				if (yych == '\'') goto yy98;
			}
		}
		++YYCURSOR;
		{
    FORWARD(0, 1);
    SETANDJUMPTO(KEY1);
}
yy94:
		++YYCURSOR;
		{
    FORWARD(0, 1);
    data = data.append(begin, l.start);
    begin=l.start;
    SETANDJUMPTO(KEY1);
}
yy96:
		++YYCURSOR;
		{
    if (*(l.start-2) == '\r') {
        if (*(l.start-3) != '\\') {
            goto syntax_error;
        }
        data = data.append(begin, l.start-3);
    } else {
        if (*(l.start-2) != '\\') {
            goto syntax_error;
        }
        data = data.append(begin, l.start-2);
    }
    begin = l.start;
    FORWARD(1, 0);
    l.column = 0; 
    SETANDJUMPTO(KEY1);
}
yy98:
		++YYCURSOR;
		{
    std::string v(begin, l.start-1);
    if (data.size() >= 1) {
        v = data + v;
    }
    data.clear();
    YYSETCONDITION(JSON);
    return yy::parser::make_STRING(v, LOCATION);
}
/* *********************************** */
yyc_COMMENTS:
		yych = *YYCURSOR;
		if (yych == '\n') goto yy104;
		++YYCURSOR;
		{
    SETANDJUMPTO(COMMENTS);
}
yy104:
		++YYCURSOR;
		{
    SETANDJUMPTO(JSON);
}
	}


syntax_error:
return yy::parser::make_YYerror(LOCATION);
}